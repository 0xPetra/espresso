@startuml
autonumber
Actor Alice
Actor Bob
Database EsQS

WalletAlice --> Validator: subscribe_for_events(14)
WalletBob --> Validator: subscribe_for_events(20)

Alice --> WalletAlice: key_gen()
WalletAlice --> Alice: (sk_a,pk_a,addr_a)

note right Alice
Alice needs to register her public key in case she wants her assets unfrozen.
end note
WalletAlice --> AddressBook: register_addr_and_enc_pub_key(addr_a,pk_a)

Bob --> WalletBob: key_gen()
WalletBob --> Bob: (sk_b,pk_b, addr_b)

note right Alice
Bob needs to register his public key in case she wants his assets unfrozen.
end note
WalletBob --> AddressBook: register_addr_and_enc_pub_key(addr_b,pk_b)

Bob --> Alice: (pk_b,addr_b)

note right Alice
Alice balance in USD is 100
end note

note right Bob
Bob balance in USD is 20
end note

note right Alice
For V1 fees will be 0.
end note

Alice --> WalletAlice: transfer_asset(sk_a,USDC,15,pk_b,addr_b)

WalletAlice --> Validator: latest_block_id()
Validator --> WalletAlice: 78
WalletAlice --> EsQS: get_cap_state(78)
EsQS --> WalletAlice: cap_state_78

note right WalletAlice
Memo is part of the transaction and stored on chain
end note

WalletAlice --> WalletAlice: tx = build_tx(sk_a,USDC,15,pk_b,addr_b,cap_state_78)

WalletAlice --> Validator: submit_tx(tx)

Validator --> WalletAlice:new_block_79
Validator --> WalletBob:new_block_79

note right WalletBob
Bob decrypts the memos from the new block.
end note
WalletBob --> WalletBob: memos = get_memos_from_block(new_block_79)
WalletBob --> WalletBob: for each memo in memos: \n   plain = decrypt(sk_b,memo) \n   if plain != Err: \n     update local state(plain)

note right WalletAlice
Alice decrypts the memos from the new block.
end note
WalletAlice --> WalletAlice: memos = get_memos_from_block(new_block_79)
WalletAlice --> WalletAlice: for each memo in memos: \n   plain = decrypt(sk_a,memo) \n   if plain != Err: \n     update local state(plain)

note right Alice
Alice balance in USD is  85
end note

note right Bob
Bob balance in USD is 35
end note


@enduml