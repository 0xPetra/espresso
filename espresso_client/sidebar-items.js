window.SIDEBAR_ITEMS = {"enum":[["KeystoreError",""]],"fn":[["import_asset","Import an unverified asset."],["new_key_pair",""],["verify_assets","Load a verified asset library with its trusted signer."]],"macro":[["async_write",""],["async_writeln",""],["command","Create a [Command] from a help string and a function."],["count",""]],"mod":[["accounts","The accounts module."],["assets","The assets module."],["cli","The generic CAP Keystore frontend"],["cli_client",""],["encryption","Symmetric encryption for locally persistent keystore data."],["events","Event definitions for ledger state changes."],["hd","Hierarchical deterministic key generation"],["io","I/O interface for the CLI."],["jf_cap","API library for the configurable asset policy system which allows for issuance, transfers and (un)freezing of arbitrary asset that are fully private, yet publicly verifiable and viewable. It is strongly recommended to refer to at least the first two chapters of [Spec] for an introduction to core concepts, data structures and main workflows."],["key_value_store","The key-value store."],["ledger_state","The ledger state module."],["loader","Traits and types for creating and loading keystores."],["lw_merkle_tree","A Merkle tree which supports arbitrarily sparse representations."],["meta","Storage for [KeystoreLoader] metadata."],["network",""],["reader","Interactive input."],["records","The records module."],["reef","An abstraction of a CAP-style network."],["transactions","The transaction module."]],"struct":[["Asset","An asset with its code as the primary key."],["AssetEditor","An editor to create or update the asset or assets store."],["AssetNotFreezableSnafu","SNAFU context selector for the `KeystoreError::AssetNotFreezable` variant"],["AssetNotMintableSnafu","SNAFU context selector for the `KeystoreError::AssetNotMintable` variant"],["AssetNotViewableSnafu","SNAFU context selector for the `KeystoreError::AssetNotViewable` variant"],["AssetVerificationSnafu","SNAFU context selector for the `KeystoreError::AssetVerificationError` variant"],["Assets","Assets stored in an assets store."],["BadMerkleProofSnafu","SNAFU context selector for the `KeystoreError::BadMerkleProof` variant"],["BincodeSnafu","SNAFU context selector for the `KeystoreError::BincodeError` variant"],["CancelledSnafu","SNAFU context selector for the `KeystoreError::Cancelled` variant"],["CannotDecryptMemoSnafu","SNAFU context selector for the `KeystoreError::CannotDecryptMemo` variant"],["ClientConfigSnafu","SNAFU context selector for the `KeystoreError::ClientConfigError` variant"],["CryptoSnafu","SNAFU context selector for the `KeystoreError::CryptoError` variant"],["EncryptingResourceAdapter",""],["EncryptionSnafu","SNAFU context selector for the `KeystoreError::EncryptionError` variant"],["FailedSnafu","SNAFU context selector for the `KeystoreError::Failed` variant"],["Icon","A small icon to display with an asset in a GUI interface."],["InconsistentAssetSnafu","SNAFU context selector for the `KeystoreError::InconsistentAsset` variant"],["InvalidAddressSnafu","SNAFU context selector for the `KeystoreError::InvalidAddress` variant"],["InvalidBlockSnafu","SNAFU context selector for the `KeystoreError::InvalidBlock` variant"],["InvalidFreezerKeySnafu","SNAFU context selector for the `KeystoreError::InvalidFreezerKey` variant"],["InvalidViewerKeySnafu","SNAFU context selector for the `KeystoreError::InvalidViewerKey` variant"],["IoSnafu","SNAFU context selector for the `KeystoreError::IoError` variant"],["KeySnafu","SNAFU context selector for the `KeystoreError::KeyError` variant"],["KeyValueStoreSnafu","SNAFU context selector for the `KeystoreError::KeyValueStoreError` variant"],["Keystore","The generic CAP keystore implementation."],["KeystoreModel","Transient state derived from the persistent [LedgerState] and [KeystoreStores]."],["KeystoreStores","Storage for keystore resources."],["MintInfo","Information required to mint an asset."],["MnemonicSnafu","SNAFU context selector for the `KeystoreError::MnemonicError` variant"],["NoSuchAccountSnafu","SNAFU context selector for the `KeystoreError::NoSuchAccount` variant"],["NullifierAlreadyPublishedSnafu","SNAFU context selector for the `KeystoreError::NullifierAlreadyPublished` variant"],["PersistenceSnafu","SNAFU context selector for the `KeystoreError::PersistenceError` variant"],["RecordAmount","Record amount."],["ScanNotFoundSnafu","SNAFU context selector for the `KeystoreError::ScanNotFound` variant"],["TimedOutSnafu","SNAFU context selector for the `KeystoreError::TimedOut` variant"],["TransactionSnafu","SNAFU context selector for the `KeystoreError::TransactionError` variant"],["UndefinedAssetSnafu","SNAFU context selector for the `KeystoreError::UndefinedAsset` variant"],["UserKeyExistsSnafu","SNAFU context selector for the `KeystoreError::UserKeyExists` variant"]],"trait":[["Captures",""],["KeystoreBackend","The interface required by the keystore from a specific network/ledger implementation."],["SendFuture",""]],"type":[["EspressoKeystore",""],["EspressoKeystoreError",""]]};